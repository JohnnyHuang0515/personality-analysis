create test tables

Revision ID: 001ises: 
Create Date:2024111000000rom alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '01wn_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('test_question,
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column(texta.Text(), nullable=False),
    sa.Column('category', sa.String(length=32 nullable=False),
    sa.Column('test_type', sa.String(length=16 nullable=False),
    sa.Column(options', sa.Text(), nullable=False),
    sa.Column('weight', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint(id   )
    op.create_table(test_answer,
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(length=64 nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('answer', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text(now()'), nullable=True),
    sa.ForeignKeyConstraint([question_id'], ['test_question.id], ),
    sa.PrimaryKeyConstraint(id   )
    op.create_table(test_report,
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(length=64 nullable=False),
    sa.Column('test_type', sa.String(length=16 nullable=False),
    sa.Column('result', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text(now()'), nullable=True),
    sa.PrimaryKeyConstraint('id)   )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table(test_report')
    op.drop_table(test_answer')
    op.drop_table('test_question')
    # ### end Alembic commands ### 